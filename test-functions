#!/bin/bash
# vim:set shiftwidth=4 tabstop=4 expandtab:
#
#    test-lxc script for automated libvirt-lxc integration tests
#    Copyright (C) 2014 CÃ©dric Bosdonnat
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.



# insert_before
#
# Insert a string before a given sed address in a file.
# Note that if the address matches several places in the file,
# the text will be added several times.
#
# $1 - FILE: the file to insert the text to
# $2 - ADDRESS: the sed address
# $3 - INSERTED: the text to insert before each the address
insert_before ()
{
    FILE="$1"
    ADDRESS="$2"
    INSERTED="$3"

    echo -e "$INSERTED" > "${FILE}.part"

    sed -i "$ADDRESS {
        h
        r ${FILE}.part
        g
        N }" "$FILE"

    rm "${FILE}.part"
}

# assert
#
# Assert that a value equals the expected one
#
# $1 - FAIL_MSG: message echoed when assertion fails.
#      If empty, nothing will be echoed.
# $2 - EXPECTED: the expected  value
# $3 - ACTUAL: the actual value
#
# Returns 0 if suceeded, 1 otherwise.
assert ()
{
    if test "$2" != "$3"; then
        if test -n "$1"; then
            echo "$1 (expected[$2] - actual[$3])"
        fi
        return 1
    fi
    return 0
}

# assert_match
#
# Assert that a value is matching a regex
#
# $1 - FAIL_MSG: message echoed when assertion fails.
#      If empty, nothing will be echoed.
# $2 - REGEX: the regular expression to search for
# $3 - STRING: the string value to search in
#
# Returns 0 if suceeded, 1 otherwise.
assert_match ()
{
    MATCHES=$(echo -e "$3" | sed -n "${2}p")
    if test -z "$MATCHES"; then
        if test -n "$1"; then
            echo "$1 ([$3] didn't match '$2')"
        fi
        return 1
    fi

    return 0
}

# function_defined
#
# Check if a function is defined or not.
#
# $1 - FN_NAME: the function name to look for
#
# Returns 0 if defined, 1 otherwise
function_defined ()
{
    typeset -f $1 >/dev/null
    return $?
}

# run_test
#
# Setup a test fixture, run the test and clean it up. A test
# is defined by:
#  * its name
#  * a <testname>_check function performing the verifications
#  * an optional <testname>_setup function setting up the SUT
#  * an optional <testname>_teardown function cleaning up the SUT
# Each of these functions will get the test name as first parameter.
# The setup function has to return 0 in case of success, 1 in case of
# failure.
#
# $1 - TEST_NAME: the name of the test. Will also be used as
#      the name of the container.
run_test ()
{
    TEST_NAME=$1

    RUN_RESULT=0
    echo -e "\n--------\n$TEST_NAME\n--------"
    if function_defined ${TEST_NAME}_setup; then
        ${TEST_NAME}_setup $TEST_NAME
        if test "$?" != "0"; then
            RUN_RESULT=1
        fi
    fi

    # Run the checks on the container
    if test "$RUN_RESULT" == "0"; then
        ${TEST_NAME}_check $TEST_NAME
        RUN_RESULT=$?
    fi

    if function_defined ${TEST_NAME}_teardown; then
        ${TEST_NAME}_teardown $TEST_NAME
    fi

    if test "$RUN_RESULT" != "0"; then
        echo "-> FAIL"
        return 1
    fi

    echo "-> OK"
    return 0
}

wait_file ()
{
    timeout 30s bash -c "while ! test -e \"$1\"; do sleep 0.5; done"
}

# add_service
#
# Add a systemd service running the provided command.
#
# $1 - ROOTFS: the path to the rootfs of the container
# $2 - NAME: the service name. Will be prefixed by 'lxc-test_'
# $3 - COMMAND: command to run as a string
# $4 - AFTER: name of the service to wait for
add_service ()
{
    local ROOTFS="$1"
    local SERVICE_NAME="$2"
    local SERVICE_COMMAND="$3"
    local SERVICE_AFTER="$4"

    cat > $ROOTFS/usr/lib/systemd/system/test-lxc_$SERVICE_NAME.service << EOF
[Unit]
Description=Test-lxc $SERVICE_NAME
After=$SERVICE_AFTER

[Service]
Type=oneshot
ExecStart=/bin/bash -c "$SERVICE_COMMAND"

[Install]
WantedBy=multi-user.target
EOF

    systemctl --root=$ROOTFS enable test-lxc_$SERVICE_NAME
}

# remove_service
#
# Removes a systemd service from the rootfs
#
# $1 - ROOTFS: the path to the rootfs of the container
# $2 - NAME: the service name. Will be prefixed by 'lxc-test_'
remove_service ()
{
    local ROOTFS="$1"
    local SERVICE_NAME="$2"

    systemctl --root=$ROOTFS disable test-lxc_$SERVICE_NAME

    rm $ROOTFS/usr/lib/systemd/system/test-lxc_$SERVICE_NAME.service
}
