#!/bin/bash
# vim:set shiftwidth=4 tabstop=4 expandtab:
#
#    test-lxc script for automated libvirt-lxc integration tests
#    Copyright (C) 2014 CÃ©dric Bosdonnat
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.



SCRIPT_FOLDER=$(dirname "$0")
. $SCRIPT_FOLDER/test-functions
. $SCRIPT_FOLDER/libvirt-utils


show_help()
{
    cat << EOF

test-lxc -d /path/to/dvd/iso -w /path/to/work/dir [-h]

Test LXC containers creation throught libvirt.

ARGUMENTS

    -d  Path to the SLES 12 or openSUSE DVD ISO to use for the rootfs creation
    -w  Path to the directory containing all test data, including VM disk image.
    -s  Comma-separated names of tests to skip

EOF
}

dvdiso=
workdir=
skiptests=

while getopts "d:hw:s:" opt; do
    case "$opt" in
        d) dvdiso=$OPTARG
           ;;
        w) workdir=$OPTARG
           ;;
        :) echo "option $OPTARG requires an argument"
           show_help
           exit 1
           ;;
        h) show_help
           exit 1
           ;;
        s) skiptests=$OPTARG
           ;;
        *) echo "invalid argument $OPTARG"
           show_help
           exit 1
           ;;
    esac
done

# Check that we had all expected arguments
if test -z "$dvdiso"; then
    echo "Missing -d DVD ISO image path."
    exit 1
fi

if test -z "$workdir"; then
    echo "Missing -w work directory path."
    exit 1
fi

RESULT=0

# default_setup
#
# Setup the container under test.
#
# $1 - TEST_NAME: the name of the test. Will also be used as
#      the name of the container.
default_setup()
{
    TEST_NAME=$1

    # Remove the previous log to get more accurate error reporting
    rm /var/log/libvirt/lxc/${TEST_NAME}.log 2>/dev/null

    # Prepare the container under test
    $VIRSH create $workdir/${TEST_NAME}.xml
    if test "$?" != "0"; then
        echo "Failed to create container"
        grep 'error : ' /var/log/libvirt/lxc/${TEST_NAME}.log
        return 1
    fi
    return 0
}

# default_teardown
#
# Cleanup the container under test.
#
# $1 - TEST_NAME: the name of the test.
default_teardown()
{
    TEST_NAME=$1

    # cleanup the container even if the test failed
    $VIRSH destroy $TEST_NAME
    if test "$?" != "0"; then
        echo "Failed to destroy container"
        return 1
    fi
}

distro_nosec_setup ()
{
    TEST_NAME=$1
    unset INIT_TASK
    unset INIT_TASK_ARGS
    unset SECMODEL
    create_config "$workdir/rootfs" $TEST_NAME
    default_setup $TEST_NAME
}

distro_nosec_teardown ()
{
    default_teardown $1
}

distro_nosec_check ()
{
    TEST_NAME=$1

    CONTROLLER_PID=$($VIRSH domid $TEST_NAME)
    PROCESS_PID=$(ps -o pid --ppid $CONTROLLER_PID --no-header | tr -d ' ')

    AA_PROFILE=$(cat /proc/$PROCESS_PID/attr/current)

    # Check that the processes are unconfined
    assert "Container process not unconfined" "unconfined" "$AA_PROFILE"
    if test "$?" != "0"; then
        return 1
    fi

    # Sleep a bit to give time to the container to start before checking it
    sleep 2

    # Check that the whole distro has started
    CHILDREN_PS=$(ps --ppid $PROCESS_PID -h)
    assert_match "/sbin/init has no child processes" "/^.\+$/" "$CHILDREN_PS"
}

distro_apparmor_setup ()
{
    TEST_NAME=$1
    unset INIT_TASK
    unset INIT_TASK_ARGS
    SECMODEL="apparmor"
    create_config "$workdir/rootfs" $TEST_NAME
    default_setup $TEST_NAME
}

distro_apparmor_teardown ()
{
    default_teardown $1
}

distro_apparmor_check ()
{
    TEST_NAME=$1

    CONTROLLER_PID=$($VIRSH domid $TEST_NAME)
    PROCESS_PID=$(ps -o pid --ppid $CONTROLLER_PID --no-header | tr -d ' ')
    UUID=$($VIRSH domuuid $TEST_NAME)

    # Check that we have the profile enforced
    AA_PROFILE=$(cat /proc/$PROCESS_PID/attr/current)

    assert "Wrong container process profile" "libvirt-$UUID (enforce)" "$AA_PROFILE"
    if test "$?" != "0"; then
        return 1
    fi

    # Check that the whole distro has started
    CHILDREN_PS=$(ps --ppid $PROCESS_PID -h)
    assert_match "/sbin/init has no child processes" "/^.\+$/" "$CHILDREN_PS"
}

keep_mknod_setup ()
{
    TEST_NAME=$1

    INIT_TASK="/bin/bash"
    unset INIT_TASK_ARGS
    unset SECMODEL
    create_config "$workdir/rootfs" $TEST_NAME

    # Custom configuration for the test
    CONFIG=$workdir/${TEST_NAME}.xml
    CAPS=$(cat << EOF
  <features>
    <capabilities policy='default'>
      <mknod state='on'/>
    </capabilities>
  </features>
EOF
)
    insert_before "$CONFIG" "/<devices>/" "$CAPS"

    default_setup $TEST_NAME
}

keep_mknod_teardown ()
{
    default_teardown $1
}

keep_mknod_check ()
{
    TEST_NAME=$1

    # Make sure pscap is installed
    if test ! -e "/usr/bin/pscap"; then
        zypper --non-interactive install libcap-ng-utils
    fi

    CONTROLLER_PID=$($VIRSH domid $TEST_NAME)
    CAPS=$(pscap | grep "^$CONTROLLER_PID")
    assert_match "mknod capability not kept on container" \
                 "/ mknod,/" "$CAPS"
}

caps_allow_setup ()
{
    TEST_NAME=$1

    INIT_TASK="/bin/bash"
    unset INIT_TASK_ARGS
    unset SECMODEL
    create_config "$workdir/rootfs" $TEST_NAME

    # Custom configuration for the test
    CONFIG=$workdir/${TEST_NAME}.xml
    CAPS=$(cat << EOF
  <features>
    <capabilities policy='allow'/>
  </features>
EOF
)

    insert_before "$CONFIG" "/<devices>/" "$CAPS"

    default_setup $TEST_NAME
}

caps_allow_teardown ()
{
    default_teardown $1
}

caps_allow_check ()
{
    TEST_NAME=$1

    # Make sure pscap is installed
    if test ! -e "/usr/bin/pscap"; then
        zypper --non-interactive install libcap-ng-utils
    fi

    CONTROLLER_PID=$($VIRSH domid $TEST_NAME)
    CAPS=$(pscap | grep "^$CONTROLLER_PID")
    assert_match "No full capabilities on container" \
                 "/full$/" "$CAPS"
}

ifname_setup ()
{
    TEST_NAME=$1

    INIT_TASK="/bin/bash"
    INIT_TASK_ARGS=(-c 'ip a >/tmp/output.log')
    unset SECMODEL
    create_config "$workdir/rootfs" $TEST_NAME

    # Custom configuration for the test
    CONFIG=$workdir/${TEST_NAME}.xml
    NETCFG=$(cat << EOF
      <guest dev='myeth0'/>
EOF
)

    insert_before "$CONFIG" "/<source network=/" "$NETCFG"

    default_setup $TEST_NAME
}

ifname_teardown ()
{
    rm "$workdir/rootfs/tmp/output.log"
}

ifname_check ()
{
    TEST_NAME=$1

    wait_file "$workdir/rootfs/tmp/output.log"
    if test "$?" != "0"; then
        echo "ROOTFS/tmp/output.log file not created by the container"
        return 1
    fi

    local OUTPUT=$(cat "$workdir/rootfs/tmp/output.log")
    assert_match "/proc/sys/net/ipv4/conf/myeth0 doesn't exist" \
                 "/myeth0/" "$OUTPUT"
}

distro_userns_setup ()
{
    TEST_NAME=$1

    unset INIT_TASK
    unset INIT_TASK_ARGS
    unset SECMODEL
    create_config "$workdir/rootfs" $TEST_NAME

    # Custom configuration for the test
    CONFIG=$workdir/${TEST_NAME}.xml
    IDMAP=$(cat << EOF
  <idmap>
    <uid start='0' target='1000' count='100'/>
    <gid start='0' target='100' count='100'/>
  </idmap>
EOF
)
    insert_before "$CONFIG" "/<on_poweroff>/" "$IDMAP"

    # Change rootfs ownership
    chown 1000:100 "$workdir/rootfs"

    default_setup $TEST_NAME
}

distro_userns_teardown ()
{
    default_teardown $1
    chown root:root "$workdir/rootfs"
}

distro_userns_check ()
{
    TEST_NAME=$1

    CONTROLLER_PID=$($VIRSH domid $TEST_NAME)
    PROCESS_PID=$(ps -o pid --ppid $CONTROLLER_PID --no-header | tr -d ' ')

    UIDMAP=$(cat /proc/$PROCESS_PID/uid_map | sed -e 's/ \+/ /g')
    GIDMAP=$(cat /proc/$PROCESS_PID/gid_map | sed -e 's/ \+/ /g')

    # Check that the mapping is applied
    assert "Wrong uid mapping" " 0 1000 100" "$UIDMAP"
    if test "$?" != "0"; then
        return 1
    fi

    assert "Wrong gid mapping" " 0 100 100" "$GIDMAP"
    if test "$?" != "0"; then
        return 1
    fi

    # Sleep a bit to give time to the container to start before checking it
    sleep 2

    # Check that the whole distro has started
    CHILDREN_PS=$(ps --ppid $PROCESS_PID -h)
    assert_match "/sbin/init has no child processes" "/^.\+$/" "$CHILDREN_PS"
}

distro_ip_setup ()
{
    TEST_NAME=$1
    ROOTFS=$workdir/rootfs

    # Make sure we have iproute2 in the container
    zypper --root "$ROOTFS" --non-interactive install iproute2

    # Create a ifcfg-eth0
    cat > $ROOTFS/etc/sysconfig/network/ifcfg-eth0 << EOF
STARTMODE=auto
BOOTPROTO=dhcp
EOF

    # Normal config
    unset INIT_TASK
    unset INIT_TASK_ARGS
    unset SECMODEL
    add_service "$workdir/rootfs" "ip_check" "ip -f inet a show eth0 >/tmp/output.log" "network.service"
    create_config "$workdir/rootfs" $TEST_NAME
    default_setup $TEST_NAME
}

distro_ip_teardown ()
{
    # Delete ifcfg-eth0
    ROOTFS=$workdir/rootfs
    rm $ROOTFS/etc/sysconfig/network/ifcfg-eth0
    default_teardown $1
    remove_service "$ROOTFS" "ip_check"
    rm "$ROOTFS/tmp/output.log"
}

distro_ip_check ()
{
    TEST_NAME=$1

    wait_file "$workdir/rootfs/tmp/output.log"
    if test "$?" != "0"; then
        echo "ROOTFS/tmp/output.log file not created by the container"
        return 1
    fi

    local IP=$(cat "$workdir/rootfs/tmp/output.log")
    assert_match "No IP set" "/ inet /" "$IP"
}

ipconfig_setup ()
{
    TEST_NAME=$1
    ROOTFS=$workdir/rootfs

    # Make sure we have iproute2 in the container
    zypper --root "$ROOTFS" --non-interactive install iproute2

    INIT_TASK="/bin/bash"
    INIT_TASK_ARGS=(-c 'ip -f inet a show eth0 >/tmp/ip.log; ip route >/tmp/route.log')
    unset SECMODEL
    create_config "$workdir/rootfs" $TEST_NAME

    # Custom configuration for the test
    CONFIG=$workdir/${TEST_NAME}.xml
    IPS=$(cat << EOF
      <ip address='192.168.122.5' family='ipv4' prefix='24'/>
      <ip address='192.168.122.6' family='ipv4' prefix='24'/>
      <route family='ipv4' address='0.0.0.0' gateway='192.168.122.1'/>
      <route family='ipv4' gateway='192.168.122.1' address='192.168.125.0' prefix='24'/>
EOF
)
    insert_before "$CONFIG" "/<\/interface>/" "$IPS"
    default_setup $TEST_NAME
}

ipconfig_teardown ()
{
    rm "$workdir/rootfs/tmp/ip.log"
    rm "$workdir/rootfs/tmp/route.log"
}

ipconfig_check ()
{
    TEST_NAME=$1

    wait_file "$workdir/rootfs/tmp/route.log"
    if test "$?" != "0"; then
        echo "ROOTFS/tmp/route.log file not created by the container"
        return 1
    fi

    # Check ips
    local IPS=$(cat "$workdir/rootfs/tmp/ip.log")
    assert_match "192.168.122.5/24 IP not set" "/192\.168\.122\.5\/24/" "$IPS"
    if test $? -ne 0; then
        return 1
    fi

    assert_match "192.168.122.6/24 IP not set" "/192\.168\.122\.6\/24/" "$IPS"
    if test $? -ne 0; then
        return 1
    fi

    # Check routes
    local ROUTES=$(cat "$workdir/rootfs/tmp/route.log")
    assert_match "default route not set" \
                 "/default via 192\.168\.122\.1 dev eth0/" "$ROUTES"
    if test $? -ne 0; then
        return 1
    fi

    assert_match "192.168.125.0/24 route not set" \
                 "/192\.168\.125\.0\/24 via 192\.168\.122\.1 dev eth0/" "$ROUTES"
}

# Clean workdir
if test -d $workdir; then
    echo "Cleaning up workspace"
    rm -r $workdir/*
fi

init_env
trap "restore_env" EXIT HUP INT QUIT TERM

create_rootfs "$workdir/rootfs" "$dvdiso"
if test "$?" != "0"; then
    echo "Failed to create rootfs"
    return 1
fi

TESTS="distro_nosec \
      distro_apparmor \
      keep_mknod \
      caps_allow \
      distro_userns \
      distro_ip \
      ipconfig \
      ifname"


for TEST in $TESTS; do
    if test $(echo $skiptests | sed -n "/\(^\|,\)$TEST\(,\|$\)/p" | wc -l) -eq 1; then
        echo -e "\n--------\n$TEST\n--------"
        echo "-> SKIPPED"
        continue
    fi
    run_test "$TEST"
    if test $? -ne 0; then
        RESULT=1
    fi
done

exit $RESULT
